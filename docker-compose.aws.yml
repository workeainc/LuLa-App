version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: lula-mongodb-aws
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-lula}
    volumes:
      - mongodb_data:/data/db
      - ./lula-backend/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./lula-backend/backups:/backups
    networks:
      - lula-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: lula-redis-aws
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - lula-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Lula Backend API
  backend:
    build: ./lula-backend
    container_name: lula-backend-aws
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGO_DATABASE:-lula}?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRE: 7d
      STREAM_API_KEY: ${STREAM_API_KEY:-d9haf5vcbwwp}
      STREAM_API_SECRET: ${STREAM_API_SECRET:-your-stream-api-secret-here}
      # AWS-specific environment variables
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-lula-media-storage}
      # Frontend URLs for AWS
      FRONTEND_URL: ${FRONTEND_URL:-https://yourdomain.com}
      ADMIN_URL: ${ADMIN_URL:-https://admin.yourdomain.com}
      USER_APP_URL: ${USER_APP_URL:-https://yourdomain.com/user}
      STREAMER_APP_URL: ${STREAMER_APP_URL:-https://yourdomain.com/streamer}
    volumes:
      - ./lula-backend/logs:/app/logs
      - ./lula-backend/uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lula-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Admin App Frontend
  admin-app:
    build: ./lula-admin/lula-admin
    container_name: lula-admin-app-aws
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_BACKEND_URL: ${BACKEND_URL:-https://api.yourdomain.com}
      VITE_API_URL: ${BACKEND_URL:-https://api.yourdomain.com}/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - lula-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5173', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # User App Frontend (Web Version)
  user-app-web:
    build: 
      context: ./user-app
      dockerfile: Dockerfile.web
    container_name: lula-user-app-web-aws
    restart: unless-stopped
    environment:
      NODE_ENV: production
      EXPO_PUBLIC_API_URL: ${BACKEND_URL:-https://api.yourdomain.com}/api
      EXPO_PUBLIC_WS_URL: ${WS_URL:-wss://api.yourdomain.com}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - lula-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:19006', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Streamer App Frontend (Web Version)
  streamer-app-web:
    build: 
      context: ./streamer-app
      dockerfile: Dockerfile.web
    container_name: lula-streamer-app-web-aws
    restart: unless-stopped
    environment:
      NODE_ENV: production
      EXPO_PUBLIC_API_URL: ${BACKEND_URL:-https://api.yourdomain.com}/api
      EXPO_PUBLIC_WS_URL: ${WS_URL:-wss://api.yourdomain.com}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - lula-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:19007', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lula-nginx-aws
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-aws.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
      admin-app:
        condition: service_healthy
      user-app-web:
        condition: service_healthy
      streamer-app-web:
        condition: service_healthy
    networks:
      - lula-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  lula-network:
    driver: bridge
